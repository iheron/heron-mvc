// Generated by LiveScript 1.2.0
(function(){
  var fs, path, _;
  fs = require('fs');
  path = require('path');
  _ = require('lodash');
  /**
  * @params: options {
  *   routeDir         # route dir path
  *   routeRegex       # route regex
  *   controllerDir    # controller dir path
  *   controllerRegex  # controller regex
  * }
  */
  module.exports = function(options, fn){
    var root, getRouteFileSync, getControllerFileSync, controllers, results, i$, len$, controllerArr, controller, action, methods, action$, ref$, k, v;
    root = process.cwd();
    options == null && (options = {});
    if (!options.routeDir) {
      options.routeDir = path.join(root, 'lib/routes');
      console.warn("warn: please set options.routeDir or load default -> routeDir: " + options.routeDir);
    }
    if (!options.controllerDir) {
      options.controllerDir = path.join(root, 'lib/controllers');
      console.warn("warn: please set options.controllerDir or load default -> controllerDir: " + options.controllerDir);
    }
    getRouteFileSync = function(dir){
      var files, route_files, routes;
      files = fs.readdirSync(dir);
      route_files = _.filter(files, function(item){
        return /.*route(?=\.).*/i.test(item);
      });
      routes = _.union(_.map(route_files, function(route){
        return route.replace(/\..*/i, '');
      }));
      return routes = _.map(routes, function(item){
        var route_match, route;
        route_match = item.match(/.*(?=route)/i);
        route = route_match[0];
        route = route.replace(/_$/i, "");
        return [route, item];
      });
    };
    getControllerFileSync = function(dir){
      var files, route_files, routes;
      files = fs.readdirSync(dir);
      route_files = _.filter(files, function(item){
        return /.*controller(?=\.).*/i.test(item);
      });
      routes = _.union(_.map(route_files, function(route){
        return route.replace(/\..*/i, '');
      }));
      return routes = _.map(routes, function(item){
        var controller_match, controller;
        controller_match = item.match(/.*(?=controller)/i);
        controller = controller_match[0];
        controller = controller.replace(/_$/i, "");
        return [controller, item];
      });
    };
    controllers = getControllerFileSync(options.controllerDir);
    if (!controllers) {
      throw new Error("can not read controller directory: " + options.controllerDir);
    }
    results = {};
    for (i$ = 0, len$ = controllers.length; i$ < len$; ++i$) {
      controllerArr = controllers[i$];
      controller = require(path.join(options.controllerDir, "./" + controllerArr[1]));
      for (action in controller) {
        methods = controller[action];
        action$ = (ref$ = {}, ref$[action + ""] = {}, ref$);
        for (k in methods) {
          v = methods[k];
          switch (k) {
          case 'all':
          case 'get':
          case 'post':
            action$[action + ""][k + ""] = v;
            if ('function' === typeof fn) {
              fn({
                controller: controllerArr[0],
                action: action,
                method: k,
                func: v
              });
            }
          }
        }
        import$(results, action$);
      }
    }
    return results;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
