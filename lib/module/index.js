// Generated by LiveScript 1.4.0
(function(){
  var _, heronModule;
  _ = require('lodash');
  heronModule = (function(){
    heronModule.displayName = 'heronModule';
    var prototype = heronModule.prototype, constructor = heronModule;
    function heronModule(_root){
      this._root = _root;
      this.get = bind$(this, 'get', prototype);
      this.patch = bind$(this, 'patch', prototype);
      this.options = bind$(this, 'options', prototype);
      this.head = bind$(this, 'head', prototype);
      this._module = [];
    }
    /**
     * @params: options {
     *   path                  # route dir path
     *   action                # [function] action
     *   before                # [function] before filter
     *   after                 # [function] after filter
     * }
     */
    prototype.head = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'head';
      }
      this._module.push(options);
      return this;
    };
    prototype.options = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'options';
      }
      this._module.push(options);
      return this;
    };
    prototype.patch = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'patch';
      }
      this._module.push(options);
      return this;
    };
    prototype.get = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'get';
      }
      this._module.push(options);
      return this;
    };
    prototype.post = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'post';
      }
      this._module.push(options);
      return this;
    };
    prototype.put = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'put';
      }
      this._module.push(options);
      return this;
    };
    prototype['delete'] = function(options, action){
      var path;
      if (_.isString(options)) {
        path = options;
        options = {};
        options.path = path;
        options.action = action;
        options.method = 'delete';
      }
      this._module.push(options);
      return this;
    };
    return heronModule;
  }());
  module.exports = heronModule;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
